<?php

declare(strict_types=1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\omnipedia_site_theme\EuCookieCompliancePopUpInfoPreprocess;
use Drupal\omnipedia_site_theme\MaintenancePage;
use Drupal\omnipedia_site_theme\MediaSubtitleTracks;
use Drupal\omnipedia_site_theme\OmnipediaRegionPlaceholder;
use Drupal\omnipedia_site_theme\PageRegionPlaceholdersPreprocess;
use Drupal\omnipedia_site_theme\SiteBrandingCustomProperties;
use Drupal\omnipedia_site_theme\SiteBrandingInliner;
use Drupal\omnipedia_site_theme\SiteBrandingMainPageLinks;

/**
 * Implements \hook_theme().
 *
 * @see \Drupal\omnipedia_site_theme\OmnipediaRegionPlaceholder::theme()
 */
function omnipedia_site_theme_theme(
  array $existing, string $type, string $theme, string $path
): array {

  return \Drupal::classResolver(OmnipediaRegionPlaceholder::class)->theme(
    $existing, $type, $theme, $path
  );

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * This adds 'html__extended' as a template suggestion so that we can extend
 * html.html.twig without re-implementing the whole template.
 */
function omnipedia_site_theme_theme_suggestions_html_alter(
  array &$suggestions, array $variables
): void {
  $suggestions[] = 'html__extended';
}

/**
 * Prepares variables for HTML document templates.
 *
 * This adds the 'omnipedia_is_main_page' variable.
 *
 * Default template: html.html.twig.
 *
 * @see \Drupal\omnipedia_main_page\Service\MainPageRouteInterface::isCurrent()
 *
 * @see \Drupal\omnipedia_site_theme\MaintenancePage::preprocessHtml()
 */
function omnipedia_site_theme_preprocess_html(array &$variables): void {

  /** @var bool */
  $variables['omnipedia_is_main_page'] = \Drupal::service(
    'omnipedia_main_page.route',
  )->isCurrent();

  \Drupal::classResolver(SiteBrandingCustomProperties::class)->preprocessHtml(
    $variables
  );

  \Drupal::classResolver(MaintenancePage::class)->preprocessHtml($variables);

}

/**
 * Prepares variables for the page template.
 *
 * - Adds the 'omnipedia_is_search_page' variable.
 *
 * - Builds header and first sidebar region placeholders.
 *
 * Default template: page.html.twig.
 *
 * @see \Drupal\omnipedia_search\Service\WikiSearchInterface::isCurrentRouteSearchPage()
 *
 * @see \Drupal\omnipedia_site_theme\PageRegionPlaceholdersPreprocess::preprocess()
 */
function omnipedia_site_theme_preprocess_page(array &$variables): void {

  /** @var bool */
  $variables['omnipedia_is_search_page'] = \Drupal::service(
    'omnipedia.wiki_search'
  )->isCurrentRouteSearchPage();

  \Drupal::classResolver(PageRegionPlaceholdersPreprocess::class)->preprocess(
    $variables
  );

}

/**
 * Prepares variables for the page template when in maintenance mode.
 *
 * @see \Drupal\omnipedia_site_theme\MaintenancePage::preprocessMaintenancePage()
 */
function omnipedia_site_theme_preprocess_maintenance_page(
  array &$variables
): void {

  \Drupal::classResolver(MaintenancePage::class)->preprocessMaintenancePage(
    $variables
  );

}

/**
 * Prepares variables for region templates.
 *
 * This attaches the 'omnipedia_site_theme/sidebars' library to 'sidebar_first'
 * and 'sidebar_second' regions.
 */
function omnipedia_site_theme_preprocess_region(array &$variables): void {

  if (\in_array($variables['region'], ['sidebar_first', 'sidebar_second'])) {
    $variables['#attached']['library'][] = 'omnipedia_site_theme/sidebars';
  }

}

/**
 * Prepares variables for Omnipedia region placeholder templates.
 *
 * Default template: layout/omnipedia-region-placeholder.html.twig.
 */
function omnipedia_site_theme_preprocess_omnipedia_region_placeholder(
  array &$variables
): void {

  \Drupal::classResolver(OmnipediaRegionPlaceholder::class)->preprocess(
    $variables
  );

}

/**
 * Implements hook_element_info_alter().
 *
 * This attaches the 'omnipedia_site_theme/form_radios' library to the 'radios'
 * element.
 */
function omnipedia_site_theme_element_info_alter(array &$info): void {
  $info['radios']['#attached']['library'][] =
    'omnipedia_site_theme/form_radios';
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * This alters the submit button for the wiki search view exposed form:
 *
 * - Sets '#use_button_element' to true so that the ambientimpact_base theme
 *   replaces the <input> with a <button> element as the latter can contain
 *   markup.
 *
 * - Wraps the button content in an icon, with visually hidden text. This is
 *   dependent on the previous point.
 *
 * - Sets the 'plain-button' class on the button.
 *
 * @see ambientimpact_base/templates/form/input--button-element.html.twig
 *   Template suggestion that outputs a <button> element rather than an <input>.
 *   Also documents rationale and links.
 */
function omnipedia_site_theme_form_views_exposed_form_alter(
  array &$form, FormStateInterface $formState, string $formId
): void {
  if ($form['#id'] !== 'views-exposed-form-wiki-search-page') {
    return;
  }

  /** @var array */
  $submit = &$form['actions']['submit'];

  $submit['#use_button_element'] = true;

  $submit['content'] = [
    '#type'         => 'ambientimpact_icon',
    '#bundle'       => 'libricons',
    '#icon'         => 'loupe',
    '#text'         => $submit['#value'],
    '#textDisplay'  => 'visuallyHidden',
  ];

  $submit['#attributes']['class'][] = 'plain-button';

  // Set the HTML required attribute on the field. Note that using '#required'
  // here causes Views/Drupal to output an empty error message for some strange
  // reason when generating the form, so we're setting the attribute directly.
  // We're primarily doing this for UX reasons: so that browsers refuse to
  // submit the form if terms are empty and thus avoiding a page load, and not
  // for data validation, which must be server-side. If the browser is really
  // old and doesn't support the required attribute, users just get the empty
  // search results page.
  if (isset($form['terms']['#type'])) {
    // $form['terms']['#required'] = true;
    $form['terms']['#attributes']['required'] = 'required';
  }
}

/**
 * Prepares variables for the 'help_block' block template.
 *
 * This attaches the 'omnipedia_site_theme/help' library.
 */
function omnipedia_site_theme_preprocess_block__help_block(
  array &$variables
): void {
  $variables['#attached']['library'][] = 'omnipedia_site_theme/help';
}

/**
 * Prepares variables for the 'omnipedia_current_date' block template.
 *
 * This attaches the 'omnipedia_site_theme/current_date' library.
 */
function omnipedia_site_theme_preprocess_block__omnipedia_current_date(
  array &$variables
): void {
  $variables['#attached']['library'][] = 'omnipedia_site_theme/current_date';
}

/**
 * Prepares variables for the 'omnipedia_join' block template.
 *
 * This attaches the 'omnipedia_site_theme/join' library.
 */
function omnipedia_site_theme_preprocess_block__omnipedia_join(
  array &$variables
): void {
  $variables['#attached']['library'][] = 'omnipedia_site_theme/join';
}

/**
 * Prepares variables for the 'omnipedia_page_revision_history' block template.
 *
 * This attaches the 'omnipedia_site_theme/page_revision_history' library.
 */
function omnipedia_site_theme_preprocess_block__omnipedia_page_revision_history(
  array &$variables
): void {
  $variables['#attached']['library'][] = 'omnipedia_site_theme/page_revision_history';
}

/**
 * Prepares variables for the 'system_branding_block' block template.
 *
 * Attaches the 'omnipedia_site_theme/site_branding' library.
 *
 * @see \Drupal\omnipedia_site_theme\SiteBrandingInliner
 *   Attempts to inline the branding SVG elements so that their parts can be
 *   animated.
 *
 * @see \Drupal\omnipedia_site_theme\SiteBrandingMainPageLinks
 *   Alters the branding main page links.
 */
function omnipedia_site_theme_preprocess_block__system_branding_block(
  array &$variables
): void {

  $variables['#attached']['library'][] = 'omnipedia_site_theme/site_branding';

  \Drupal::classResolver(SiteBrandingInliner::class)->alter($variables);

  \Drupal::classResolver(SiteBrandingMainPageLinks::class)->alter($variables);

}

/**
 * Prepares variables for media entities.
 *
 * This switches 'field_media_image' from 'image_caption_formatter' back to
 * 'image_formatter'.
 *
 * @see \Drupal\omnipedia_site_theme\MediaSubtitleTracks
 *   Builds subtitle tracks.
 *
 * @todo Remove the 'field_media_image' stuff once 'image_caption_formatter' is
 *   no longer used by ambientimpact_media.
 *
 * @see \Drupal\ambientimpact_media\Plugin\Field\FieldFormatter\ImageFormatter::viewElements()
 *   'image_caption_formatter' set here.
 */
function omnipedia_site_theme_preprocess_media(array &$variables): void {

  \Drupal::classResolver(MediaSubtitleTracks::class)->preprocess($variables);

  if (
    !isset($variables['elements']['#embed']) ||
    $variables['elements']['#embed'] !== true ||
    empty($variables['content']['field_media_image'])
  ) {
    return;
  }

  $imageField = &$variables['content']['field_media_image'];

  foreach (Element::children($imageField) as $key) {
    if ($imageField[$key]['#theme'] === 'image_caption_formatter') {
      $imageField[$key]['#theme'] = 'image_formatter';
    }
  }
}

/**
 * Prepares variables for the omnipedia-header.html.twig template.
 *
 * This adds a 'button-placeholder' class to the 'menu_link' element.
 *
 * This attaches the 'omnipedia_site_theme/header' library to this template.
 *
 * @see \Drupal\omnipedia_block\Plugin\Block\Header
 *   Used by this block.
 */
function omnipedia_site_theme_preprocess_omnipedia_header(
  array &$variables
): void {

  $variables['menu_link']['#attributes']['class'][] = 'button-placeholder';

  $variables['#attached']['library'][] = 'omnipedia_site_theme/header';

}

/**
 * Prepares variables for page title templates.
 *
 * This attaches the 'omnipedia_site_theme/page_title' library.
 */
function omnipedia_site_theme_preprocess_page_title(array &$variables): void {
  $variables['#attached']['library'][] = 'omnipedia_site_theme/page_title';
}

/**
 * Prepares variables for the eu_cookie_compliance_popup_info template.
 *
 * @see \Drupal\omnipedia_site_theme\EuCookieCompliancePopUpInfoPreprocess
 */
function omnipedia_site_theme_preprocess_eu_cookie_compliance_popup_info(
  array &$variables
): void {

  \Drupal::classResolver(
    EuCookieCompliancePopUpInfoPreprocess::class
  )->preprocess($variables);

}

/**
 * Prepares variables for views exposed form templates.
 *
 * Default template: views-exposed-form.html.twig.
 *
 * This attaches the 'omnipedia_site_theme/search_form' library to to the wiki search
 * page view exposed form.
 */
function omnipedia_site_theme_preprocess_views_exposed_form(
  array &$variables
): void {

  if ($variables['form']['#id'] === 'views-exposed-form-wiki-search-page') {

    $variables['form']['#attached']['library'][] =
      'omnipedia_site_theme/search_form';

  }

}
