// -----------------------------------------------------------------------------
//   Tooltip component
// -----------------------------------------------------------------------------

@use '../variables/colours'; // Configure colours.
@use '../variables/general' as general-variables;
@use 'material.common/material.colour' as material-colour;
@use 'material.common/material.panel' as material-panel;
@use 'material.common/material.shadow' as material-shadow;
@use 'sass:color';
@use 'sass/helpers/colour';

///
/// Whether to compile tooltip styles with a gradient background.
///
$use-gradient: false;

///
/// Whether to compile tooltip styles with a stroke along edge with arrow.
///
$use-stroke: false;

///
/// Whether to use a border around the entire tooltip, including the arrow.
///
$use-border: true;

///
/// Whether to compile tooltip styles with an exaggerated shadow in dark mode.
///
$use-exaggerated-shadow: true;

///
/// Tooltip gradient base colour; derived from Material panel dark background.
///
$gradient-colour-on-dark: color.adjust(
  material-panel.$background-colour-dark-on-dark,
  $lightness: 7%,
);

///
/// Tooltip Material shadow depth.
///
$shadow-depth: 2;

///
/// Tooltip stroke colour used along edge with arrow.
///
$stroke-colour-on-dark: color.adjust(
  material-panel.$background-colour-dark-on-dark,
  $lightness: 10%,
);

///
/// Tooltip filter property value on dark backgrounds.
///
$filter-on-dark:
  drop-shadow(material-shadow.filter-downward($shadow-depth))
  drop-shadow(material-shadow.filter-ambient($shadow-depth));

@if ($use-exaggerated-shadow == true) {

  // On dark backgrounds, the more conservative shadow values used above will
  // barely register perceptually so we need to be much more heavy-handed to
  // highlight the edges of the tooltip against the content below it.
  $filter-on-dark:
    drop-shadow(material-shadow.filter-downward(2))
    drop-shadow(material-shadow.filter-downward(3))
    drop-shadow(material-shadow.filter-ambient(2))
    drop-shadow(material-shadow.filter-ambient(3))
    drop-shadow(material-shadow.filter-ambient(3))
    drop-shadow(material-shadow.filter-ambient(4))
    drop-shadow(material-shadow.filter-ambient(4))
    drop-shadow(material-shadow.filter-ambient(5))
    drop-shadow(material-shadow.filter-ambient(5));

}

@if ($use-stroke == true) {

  // If a stroke should be used, prepend it to the filter list so that it's
  // layered on top of the shadows and not below them in the stacking order.
  $filter-on-dark: drop-shadow(
    var(--tooltip-contrast-stroke-offset-x, 0)
    var(--tooltip-contrast-stroke-offset-y, 0)
    var(--tooltip-contrast-stroke-blur-radius, 0)
    var(--tooltip-contrast-stroke-colour)
  ) $filter-on-dark;

}

:root {

  ///
  /// Tooltip background colour.
  ///
  /// @todo Custom properties for all the things. Also correctly vary by light/
  ///   dark mode and whether light on light, dark on dark, etc.
  ///
  --tooltip-background-colour: #{
    material-panel.$background-colour-dark-on-dark
  };

  @if ($use-gradient == true) {

    ///
    /// Tooltip gradient start colour.
    ///
    /// This is the most pronounced part of the gradient right on the edge with
    /// the arrow.
    ///
    --tooltip-gradient-start-colour: #{$gradient-colour-on-dark};

    ///
    /// Tooltip gradient end colour.
    ///
    /// This is where it fades into the tooltip background.
    ///
    --tooltip-gradient-end-colour: #{color.adjust(
      $gradient-colour-on-dark, $alpha: -1,
    )};

    ///
    /// Tooltip gradient distance when tooltips are to the left or right.
    ///
    --tooltip-gradient-distance-horizontal: 20vw;

    ///
    /// Tooltip gradient distance when tooltips are above or below.
    ///
    --tooltip-gradient-distance-vertical: 20vh;

  }

  @if ($use-stroke == true) {

    ///
    /// Tooltip stroke thickness to enhance edge with arrow contrast.
    ///
    --tooltip-contrast-stroke-thickness: 0.15rem;

    ///
    /// Tooltip stroke colour to enhance edge with arrow contrast.
    ///
    --tooltip-contrast-stroke-colour: #{$stroke-colour-on-dark};

  }

}

.tippy-box.tippy-box[data-theme~='material-dark'] { // Specificity.

  @include colour.on-dark-scheme {

    @if ($use-border == true) {

      --tooltip-background-colour: #{color.mix(
        colour.$background-dark, colour.$foreground-on-dark, 95%,
      )};

      --tooltip-border-thickness: #{general-variables.$divider-thickness};

      --tooltip-border-colour: #{colours.$divider-on-dark};

      border: var(--tooltip-border-thickness) solid
        var(--tooltip-border-colour);

      .tippy-svg-arrow.tippy-svg-arrow svg { // Specificity.
        stroke:       var(--tooltip-border-colour);
        stroke-width: var(--tooltip-border-thickness);
        fill:         var(--tooltip-background-colour);
      }

    }

    background-color: var(--tooltip-background-colour);

    filter: $filter-on-dark;

    // This adds a faint background gradient on tooltips using the dark Material
    // theme to attempt to have the tooltip contrast better against a dark page
    // or parent element. The gradient always starts at the edge of the tooltip
    // that has the arrow pointing to its triggering element and fades away
    // from that edge into the background colour.
    @if ($use-gradient == true) {

      background-repeat: no-repeat;

      background-image: linear-gradient(
        to var(--tooltip-gradient-to-direction),
        var(--tooltip-gradient-start-colour),
        var(--tooltip-gradient-end-colour),
      );

      .tippy-svg-arrow.tippy-svg-arrow svg { // Specificity.
        fill: var(--tooltip-gradient-start-colour);
      }

    }

    @if ($use-stroke == true) {

      .tippy-svg-arrow.tippy-svg-arrow svg { // Specificity.
        fill: var(--tooltip-background-colour);
      }

    }

  }

  @if ($use-gradient == true) {

    &[data-placement^='top'],
    &[data-placement^='bottom'] {
      background-size: 100% var(--tooltip-gradient-distance-vertical);
    }

    &[data-placement^='left'],
    &[data-placement^='right'] {
      background-size: var(--tooltip-gradient-distance-horizontal) 100%;
    }

  }

  @if ($use-border == true) {

    .tippy-svg-arrow svg {
      clip-path: polygon(
        0     0,
        100%  0,
        100%  calc(100% - min(
          var(--tooltip-border-thickness), var(--tooltip-arrow-bleed)
        )),
        0%    calc(100% - min(
          var(--tooltip-border-thickness), var(--tooltip-arrow-bleed)
        ))
      );
    }

  }

  &[data-placement^='top'] {

    @if ($use-gradient == true) {

      --tooltip-gradient-to-direction: top;

      background-position: center bottom;

    }

    @if ($use-stroke == true) {

      --tooltip-contrast-stroke-offset-y: var(
        --tooltip-contrast-stroke-thickness
      );

    }

  }

  &[data-placement^='bottom'] {

    @if ($use-gradient == true) {

      --tooltip-gradient-to-direction: bottom;

      background-position: center top;

    }

    @if ($use-stroke == true) {

      --tooltip-contrast-stroke-offset-y: calc(var(
        --tooltip-contrast-stroke-thickness
      ) * -1);

    }

  }

  &[data-placement^='left'] {

    @if ($use-gradient == true) {

      --tooltip-gradient-to-direction: left;

      background-position: right center;

    }

    @if ($use-stroke == true) {

      --tooltip-contrast-stroke-offset-x: var(
        --tooltip-contrast-stroke-thickness
      );

    }

  }
  &[data-placement^='right'] {

    @if ($use-gradient == true) {

      --tooltip-gradient-to-direction: right;

      background-position: left center;

    }

    @if ($use-stroke == true) {

      --tooltip-contrast-stroke-offset-x: calc(var(
        --tooltip-contrast-stroke-thickness
      ) * -1);

    }

  }

}
