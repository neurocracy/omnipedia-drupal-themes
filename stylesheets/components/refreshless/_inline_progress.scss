// -----------------------------------------------------------------------------
//   RefreshLess inline progress bar component partial
// -----------------------------------------------------------------------------

@use '../../variables/colours'; // Configure colours.
@use 'material.common/material.colour' as material-colour;
@use 'sass:color';
@use 'sass/helpers/colour';

:root {

  --refreshless-inline-progress-bar-colour: #{color.scale(
    color.mix(material-colour.$primary, colour.$background-light, 30%),
    $lightness: 25%,
  )};

  @include colour.on-dark-scheme {

    --refreshless-inline-progress-bar-colour: #{color.scale(
      color.mix(material-colour.$primary, colour.$background-dark, 40%),
      $saturation: -30%, $lightness: 10%,
    )};

  }

}

.refreshless-inline-progress-bar {

  &:not(.material-ripple) {

    background-image: linear-gradient(
      var(--refreshless-inline-progress-bar-colour),
      var(--refreshless-inline-progress-bar-colour),
    );

    background-size: 0% 100%;

    background-repeat: no-repeat;

    will-change: background-size;

    // Note that these will overwrite any link transitions.
    //
    // @todo Figure out how to merge with existing values; use recursive custom
    //  properties? E.g.
    //  --transition-property: var(--transition-property), background-size;
    //  Assuming that even works.
    transition-duration: var(
      --refreshless-progress-bar-transition-duration
    ) !important;
    transition-property:          background-size !important;
    transition-timing-function:   var(--easing-decelerate, ease-in) !important;

  }

  &--active:not(.material-ripple) {

    background-size: calc(
      var(--refreshless-progress-bar-value) * (
        100% - var(--refreshless-progress-bar-start)
      ) + var(--refreshless-progress-bar-start)
    ) 100%;

  }

  &--complete:not(.material-ripple) {
    background-size: 100% 100%;
  }

}
